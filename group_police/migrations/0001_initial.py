# Generated by Django 4.2.20 on 2025-04-25 18:11

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='IoTUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('attributes', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='IoTDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_name', models.CharField(max_length=100, null=True)),
                ('device_type', models.CharField(max_length=100, null=True)),
                ('uid', models.CharField(max_length=100, unique=True)),
                ('registered_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_seen', models.DateTimeField(default=datetime.datetime(2025, 4, 25, 21, 11, 4, 424571), null=True)),
                ('description', models.TextField(default=None, null=True)),
            ],
            options={
                'permissions': [('can_view_device_information', 'can view device information'), ('can_send_device_information', 'can send device information'), ('can_disable_device', 'can disable device')],
            },
        ),
        migrations.CreateModel(
            name='IoTGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='UserToDeviceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(db_index=True, max_length=16)),
                ('at_time', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='group_police.iotdevice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(db_index=True, max_length=16)),
                ('description', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RBACPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_comment='Имя политики', max_length=64, verbose_name='Имя')),
                ('description', models.CharField(db_comment='Описание политики', max_length=64, verbose_name='Описание')),
                ('action', models.CharField(choices=[('A', 'ALLOW'), ('D', 'DROP'), ('R', 'REDIRECT')], max_length=1, verbose_name='Действие над запросом')),
                ('hosts', models.TextField(verbose_name='Запросы от адресов')),
                ('redirect_hosts', models.TextField(verbose_name='Перенаправлять на адреса')),
                ('iot_groups', models.ManyToManyField(to='group_police.iotgroup', verbose_name='Группы IoT-устройств')),
            ],
            options={
                'verbose_name': 'Групповая политика',
                'verbose_name_plural': 'Групповые политики',
                'db_table': 'RBACPolicy',
            },
        ),
        migrations.CreateModel(
            name='IoTMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receive_time', models.DateTimeField(auto_now_add=True)),
                ('topic', models.CharField(db_index=True, max_length=50)),
                ('msg', models.TextField()),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='device_msg', to='group_police.iotdevice')),
            ],
        ),
        migrations.CreateModel(
            name='IoTDeviceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(db_index=True, max_length=16)),
                ('description', models.TextField()),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='group_police.iotdevice')),
            ],
        ),
        migrations.AddField(
            model_name='iotdevice',
            name='groups',
            field=models.ManyToManyField(related_name='iot_devices', to='group_police.iotgroup'),
        ),
        migrations.CreateModel(
            name='AccessPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('conditions', models.JSONField(default=dict)),
                ('allowed_groups', models.ManyToManyField(blank=True, to='group_police.iotgroup')),
                ('allowed_roles', models.ManyToManyField(blank=True, to='auth.group')),
            ],
        ),
        migrations.AddField(
            model_name='iotuser',
            name='allowed_iot_groups',
            field=models.ManyToManyField(to='group_police.iotgroup'),
        ),
        migrations.AddField(
            model_name='iotuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='iotuser',
            name='roles',
            field=models.ManyToManyField(related_name='iot_users', to='auth.group'),
        ),
        migrations.AddField(
            model_name='iotuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
